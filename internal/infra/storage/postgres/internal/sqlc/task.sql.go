// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: task.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createTask = `-- name: CreateTask :one
INSERT INTO "tasks" ("quest_id", "name", "description", "required_for_completion", "rule")
VALUES ($1, $2, $3, $4, $5)
RETURNING created_at, updated_at, deleted_at, quest_id, id, name, description, required_for_completion, rule
`

type CreateTaskParams struct {
	QuestID               uuid.UUID
	Name                  string
	Description           string
	RequiredForCompletion bool
	Rule                  string
}

// CreateTask
//
//	INSERT INTO "tasks" ("quest_id", "name", "description", "required_for_completion", "rule")
//	VALUES ($1, $2, $3, $4, $5)
//	RETURNING created_at, updated_at, deleted_at, quest_id, id, name, description, required_for_completion, rule
func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.QuestID,
		arg.Name,
		arg.Description,
		arg.RequiredForCompletion,
		arg.Rule,
	)
	var i Task
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.QuestID,
		&i.ID,
		&i.Name,
		&i.Description,
		&i.RequiredForCompletion,
		&i.Rule,
	)
	return i, err
}

const listTasksByQuestID = `-- name: ListTasksByQuestID :many
SELECT created_at, updated_at, deleted_at, quest_id, id, name, description, required_for_completion, rule, depends_on
FROM "tasks_with_its_dependencies" t
WHERE
    t."quest_id" = $1 AND
    t."deleted_at" IS NULL
`

// ListTasksByQuestID
//
//	SELECT created_at, updated_at, deleted_at, quest_id, id, name, description, required_for_completion, rule, depends_on
//	FROM "tasks_with_its_dependencies" t
//	WHERE
//	    t."quest_id" = $1 AND
//	    t."deleted_at" IS NULL
func (q *Queries) ListTasksByQuestID(ctx context.Context, questID uuid.UUID) ([]TasksWithItsDependency, error) {
	rows, err := q.db.Query(ctx, listTasksByQuestID, questID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TasksWithItsDependency{}
	for rows.Next() {
		var i TasksWithItsDependency
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.QuestID,
			&i.ID,
			&i.Name,
			&i.Description,
			&i.RequiredForCompletion,
			&i.Rule,
			&i.DependsOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerTaskDependency = `-- name: RegisterTaskDependency :exec
INSERT INTO "tasks_dependencies" ("this_task", "depends_on_task")
VALUES ($1, $2)
`

type RegisterTaskDependencyParams struct {
	ThisTask      uuid.UUID
	DependsOnTask uuid.UUID
}

// RegisterTaskDependency
//
//	INSERT INTO "tasks_dependencies" ("this_task", "depends_on_task")
//	VALUES ($1, $2)
func (q *Queries) RegisterTaskDependency(ctx context.Context, arg RegisterTaskDependencyParams) error {
	_, err := q.db.Exec(ctx, registerTaskDependency, arg.ThisTask, arg.DependsOnTask)
	return err
}

const softDeleteTasksByQuestID = `-- name: SoftDeleteTasksByQuestID :exec
UPDATE "tasks"
SET
    "deleted_at" = NOW()
WHERE
    "quest_id" = $1 AND
    "deleted_at" IS NULL
`

// SoftDeleteTasksByQuestID
//
//	UPDATE "tasks"
//	SET
//	    "deleted_at" = NOW()
//	WHERE
//	    "quest_id" = $1 AND
//	    "deleted_at" IS NULL
func (q *Queries) SoftDeleteTasksByQuestID(ctx context.Context, questID uuid.UUID) error {
	_, err := q.db.Exec(ctx, softDeleteTasksByQuestID, questID)
	return err
}

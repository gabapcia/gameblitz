// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: player_quest.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const getPlayerQuest = `-- name: GetPlayerQuest :one
SELECT started_at, updated_at, id, player_id, quest_id, completed_at
FROM "player_quests" pq
WHERE pq."player_id" = $1 AND pq."quest_id" = $2
`

type GetPlayerQuestParams struct {
	PlayerID string
	QuestID  uuid.UUID
}

func (q *Queries) GetPlayerQuest(ctx context.Context, arg GetPlayerQuestParams) (PlayerQuest, error) {
	row := q.db.QueryRow(ctx, getPlayerQuest, arg.PlayerID, arg.QuestID)
	var i PlayerQuest
	err := row.Scan(
		&i.StartedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.PlayerID,
		&i.QuestID,
		&i.CompletedAt,
	)
	return i, err
}

const startPlayerQuest = `-- name: StartPlayerQuest :one
INSERT INTO "player_quests" ("player_id", "quest_id")
SELECT $1, q."id"
FROM "quests" q
WHERE q."id" = $2 AND q."deleted_at" IS NULL
RETURNING started_at, updated_at, id, player_id, quest_id, completed_at
`

type StartPlayerQuestParams struct {
	PlayerID string
	QuestID  uuid.UUID
}

func (q *Queries) StartPlayerQuest(ctx context.Context, arg StartPlayerQuestParams) (PlayerQuest, error) {
	row := q.db.QueryRow(ctx, startPlayerQuest, arg.PlayerID, arg.QuestID)
	var i PlayerQuest
	err := row.Scan(
		&i.StartedAt,
		&i.UpdatedAt,
		&i.ID,
		&i.PlayerID,
		&i.QuestID,
		&i.CompletedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: quest.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createQuest = `-- name: CreateQuest :one
INSERT INTO "quests" ("game_id", "name", "description")
VALUES ($1, $2, $3)
RETURNING created_at, updated_at, deleted_at, id, game_id, name, description
`

type CreateQuestParams struct {
	GameID      string
	Name        string
	Description string
}

func (q *Queries) CreateQuest(ctx context.Context, arg CreateQuestParams) (Quest, error) {
	row := q.db.QueryRow(ctx, createQuest, arg.GameID, arg.Name, arg.Description)
	var i Quest
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ID,
		&i.GameID,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const getQuestByIDAndGameID = `-- name: GetQuestByIDAndGameID :one
SELECT created_at, updated_at, deleted_at, id, game_id, name, description
FROM "quests" q
WHERE q."id" = $1 AND q."game_id" = $2 AND q."deleted_at" IS NULL
LIMIT 1
`

type GetQuestByIDAndGameIDParams struct {
	ID     uuid.UUID
	GameID string
}

func (q *Queries) GetQuestByIDAndGameID(ctx context.Context, arg GetQuestByIDAndGameIDParams) (Quest, error) {
	row := q.db.QueryRow(ctx, getQuestByIDAndGameID, arg.ID, arg.GameID)
	var i Quest
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ID,
		&i.GameID,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const softDeleteQuestByIDAndGameID = `-- name: SoftDeleteQuestByIDAndGameID :execrows
UPDATE "quests"
SET
    "deleted_at" = NOW()
WHERE "id" = $1 AND "game_id" = $2 AND "deleted_at" IS NULL
`

type SoftDeleteQuestByIDAndGameIDParams struct {
	ID     uuid.UUID
	GameID string
}

func (q *Queries) SoftDeleteQuestByIDAndGameID(ctx context.Context, arg SoftDeleteQuestByIDAndGameIDParams) (int64, error) {
	result, err := q.db.Exec(ctx, softDeleteQuestByIDAndGameID, arg.ID, arg.GameID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
